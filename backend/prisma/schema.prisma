// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                    String                  @id @default(cuid())
  shortId               String                  @unique @default(cuid()) // For easier display/sharing
  email                 String                  @unique
  password              String
  name                  String
  age                   Int
  gender                String
  address               String
  phoneNumber           String
  medicalHistory        String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  prescriptions         Prescription[]
  uploadedPrescriptions UploadedPrescription[]
  adherenceLogs         MedicationAdherenceLog[]

  @@map("patients")
}

model Doctor {
  id            String         @id @default(cuid())
  shortId       String         @unique @default(cuid()) // For easier display/sharing
  email         String         @unique
  password      String
  name          String
  specialization String
  licenseNumber String         @unique
  phoneNumber   String
  address       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  prescriptions Prescription[]

  @@map("doctors")
}

model Medication {
  id             String                  @id @default(cuid())
  name           String
  dosage         String // e.g., "10mg", "1 tablet"
  frequency      String // e.g., "ONCE_DAILY", "TWICE_DAILY", "AS_NEEDED"
  duration       String // e.g., "7 days", "1 month", "until finished"
  notes          String?
  prescriptionId String
  prescription   Prescription            @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  adherenceLogs  MedicationAdherenceLog[]

  @@map("medications")
}

model Prescription {
  id                String                  @id @default(cuid())
  patientId         String
  patient           Patient                 @relation(fields: [patientId], references: [id])
  doctorId          String
  doctor            Doctor                  @relation(fields: [doctorId], references: [id])
  date              DateTime                @default(now())
  diagnosis         String
  medications       Medication[]
  notes             String?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  estimatedEndDate  DateTime? // New field for refill alerts
  needsRefillSoon   Boolean                 @default(false) // New field for refill alerts
  adherenceLogs     MedicationAdherenceLog[]

  @@map("prescriptions")
}

// For patients to upload their own existing prescription files
model UploadedPrescription {
  id          String   @id @default(cuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  filename    String
  storagePath String // Path in the server's file system or cloud storage URL
  fileType    String // e.g., "application/pdf", "image/jpeg"
  uploadDate  DateTime @default(now())
  notes       String?

  @@map("uploaded_prescriptions")
}

model MedicationAdherenceLog {
  id             String      @id @default(cuid())
  patientId      String
  patient        Patient     @relation(fields: [patientId], references: [id])
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  medicationId   String
  medication     Medication  @relation(fields: [medicationId], references: [id])
  takenAt        DateTime    @default(now()) // Timestamp when the dose was logged as taken
  notes          String?

  @@map("medication_adherence_logs")
}
