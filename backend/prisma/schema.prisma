// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Doctor {
  id                 String         @id @default(uuid())
  shortId            String         @unique
  name               String
  specialization     String
  email              String         @unique
  phoneNumber        String         @unique
  password           String
  licenseNumber      String         @unique
  hospitalAffiliation String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  prescriptions      Prescription[]

  @@map("doctor")
}

model Patient {
  id             String         @id @default(uuid())
  shortId        String         @unique
  name           String
  age            Int
  gender         Gender
  email          String         @unique
  password       String
  phoneNumber    String         @unique
  address        String
  medicalHistory String?
  createdAt      DateTime       @default(now())
  updatedAt             DateTime               @updatedAt
  prescriptions         Prescription[]
  uploadedPrescriptions UploadedPrescription[] // Add relation to uploaded prescriptions

  @@map("patient")
}

model Prescription {
  id          String       @id @default(uuid())
  patientId   String
  doctorId    String
  date        DateTime     @default(now())
  diagnosis   String
  notes       String?
  medications Medication[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  patient     Patient      @relation(fields: [patientId], references: [id])
  doctor      Doctor       @relation(fields: [doctorId], references: [id])

  @@map("prescription")
}

model Medication {
  id             String       @id @default(uuid())
  name           String
  dosage         String
  frequency      String
  duration       String
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)

  @@map("medication")
}

enum Gender {
  Male
  Female
  Other
}

// Master list of medications from dataset
model MedicationMaster {
  id               String   @id @default(uuid())
  productName      String   // From CSV: product_name (Brand Name)
  saltComposition  String   // From CSV: salt_composition (Generic Name/Active Ingredient)
  manufacturer     String   // From CSV: product_manufactured
  subCategory      String?  // From CSV: sub_category
  sideEffects      String?  // From CSV: side_effects
  drugInteractions String?  // From CSV: drug_interactions (Stored as string/JSON)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([productName]) // Add index for faster searching by product name
  @@index([saltComposition]) // Add index for faster searching by salt composition
  @@map("medication_master")
}

// Model for storing uploaded prescription files
model UploadedPrescription {
  id        String   @id @default(uuid())
  patientId String
  filename  String   // Original filename
  storagePath String // Path or key where the file is stored (e.g., local path or S3 key)
  fileType  String   // e.g., 'application/pdf', 'image/jpeg'
  uploadDate DateTime @default(now())
  notes     String?  // Optional notes by the patient

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("uploaded_prescription")
}
